[{"title":"制作Hexo主题","url":"/2019/12/make-theme/","content":"<p>翻找了半天主题，一直没有找到自己想要的，要么太复杂，要么太简单，总是差点意思，最后决定还是自己制作一个好了。</p>\n<p>不过从头开始有点太麻烦了，所以打算基于<a href=\"https://github.com/pinggod/hexo-theme-apollo\" target=\"_blank\" rel=\"noopener\">Apollo</a>这款主题，做一些定制化更改。本帖就记录一下其中的改动点好了</p>\n<h2 id=\"Gitalk\"><a href=\"#Gitalk\" class=\"headerlink\" title=\"Gitalk\"></a>Gitalk</h2><blockquote>\n<p><a href=\"https://gitalk.github.io\" target=\"_blank\" rel=\"noopener\">Gitalk</a> 是一款使用Github的issue记录评论的插件，非常适合放在Github上的静态博客</p>\n</blockquote>\n<p>在主题的<code>_config.yml</code>中添加配置项：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Comment</span></span><br><span class=\"line\"><span class=\"attr\">gitalk:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span> <span class=\"comment\"># true</span></span><br><span class=\"line\">  <span class=\"attr\">clientID:</span> <span class=\"string\">''</span> <span class=\"comment\"># GitHub Application Client ID</span></span><br><span class=\"line\">  <span class=\"attr\">clientSecret:</span> <span class=\"string\">''</span> <span class=\"comment\"># Client Secret</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">''</span> <span class=\"comment\"># Repository name</span></span><br><span class=\"line\">  <span class=\"attr\">owner:</span> <span class=\"string\">''</span> <span class=\"comment\"># GitHub ID</span></span><br><span class=\"line\">  <span class=\"attr\">admin:</span> <span class=\"string\">''</span> <span class=\"comment\"># GitHub ID</span></span><br><span class=\"line\">  <span class=\"attr\">distractionFreeMode:</span> <span class=\"literal\">false</span> <span class=\"comment\"># true</span></span><br></pre></td></tr></table></figure>\n\n<p>可将gitalk的js、css资源放在<code>source/lib</code>下。</p>\n<p>在主题的<code>layout/partial</code>文件夹中，新建一个<code>comment.pug</code>（需使用主题所选的模板）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if theme.gitalk.enable</span><br><span class=\"line\">  link(rel&#x3D;&quot;stylesheet&quot;, href&#x3D;url_for(&quot;lib&#x2F;gitalk.css&quot;))</span><br><span class=\"line\">  script(src&#x3D;url_for(&quot;lib&#x2F;gitalk.min.js&quot;))</span><br><span class=\"line\">  .gitalk#gitalk-container</span><br><span class=\"line\">  script.</span><br><span class=\"line\">    var gitalk &#x3D; new Gitalk(&#123;</span><br><span class=\"line\">      clientID: &#39;!&#123;theme.gitalk.clientID&#125;&#39;,</span><br><span class=\"line\">      clientSecret: &#39;!&#123;theme.gitalk.clientSecret&#125;&#39;,</span><br><span class=\"line\">      repo: &#39;!&#123;theme.gitalk.repo&#125;&#39;,</span><br><span class=\"line\">      owner: &#39;!&#123;theme.gitalk.owner&#125;&#39;,</span><br><span class=\"line\">      admin: [&#39;!&#123;theme.gitalk.admin&#125;&#39;],</span><br><span class=\"line\">      id: location.pathname,</span><br><span class=\"line\">      distractionFreeMode: &#39;!&#123;theme.gitalk.distractionFreeMode&#125;&#39;,  &#x2F;&#x2F; Facebook-like distraction free mode</span><br><span class=\"line\">      pagerDirection: &#39;last&#39;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    gitalk.render(&#39;gitalk-container&#39;)</span><br></pre></td></tr></table></figure>\n\n<p>在<code>layout/post.pug</code>中文章下添加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">include partial&#x2F;comment</span><br></pre></td></tr></table></figure>\n\n<p>主题中要加的东西就这些了，至于配置项中的配置如何申请，参见<a href=\"https://gitalk.github.io\" target=\"_blank\" rel=\"noopener\">Gitalk</a></p>\n<p>因为Gitalk使用初始化时的id创建issue，为避免非法字符，可以对<code>location.pathname</code>做<code>md5</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">script(src&#x3D;url_for(&quot;lib&#x2F;md5.min.js&quot;))</span><br><span class=\"line\">...</span><br><span class=\"line\">id: md5(location.pathname),</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h2><blockquote>\n<p><a href=\"https://github.com/theme-next/hexo-generator-searchdb\" target=\"_blank\" rel=\"noopener\">hexo-generator-searchdb</a> 为静态博客生成搜索所需数据</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n\n<p>在主题的<code>_config.yml</code>中添加配置项：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是否启用搜索</span></span><br><span class=\"line\"><span class=\"attr\">search:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>在根目录下的<code>_config.yml</code>中添加配置项：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Search</span></span><br><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.json</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">all</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Less\"><a href=\"#Less\" class=\"headerlink\" title=\"Less\"></a>Less</h2><blockquote>\n<p><a href=\"https://github.com/hexojs/hexo-renderer-less\" target=\"_blank\" rel=\"noopener\">hexo-renderer-less</a> 使主题可使用less</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-renderer-less --save</span><br></pre></td></tr></table></figure>\n\n<p>在主题目录下的<code>_config.yml</code>中添加less文件的路径</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">less:</span><br><span class=\"line\">  paths: [<span class=\"string\">'source/css'</span>]</span><br></pre></td></tr></table></figure>\n\n<p>至此即可修改css文件夹中的less样式啦</p>\n<h2 id=\"busuanzi\"><a href=\"#busuanzi\" class=\"headerlink\" title=\"busuanzi\"></a>busuanzi</h2><blockquote>\n<p><a href=\"https://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"noopener\">busuanzi</a> 访问量统计</p>\n</blockquote>\n<p>在主题的<code>_config.yml</code>中添加选项：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 访问量统计(不蒜子)</span></span><br><span class=\"line\"><span class=\"attr\">busuanzi:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>将busuanzi的js代码放到<code>source/lib</code>下，再在模板中（例如<code>scripts.pug</code>或<code>footer.pug</code>之类）添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;- 访问量统计</span><br><span class=\"line\">if theme.busuanzi</span><br><span class=\"line\">  script(async src&#x3D;url_for(&quot;lib&#x2F;busuanzi.pure.mini.js&quot;))</span><br></pre></td></tr></table></figure>\n\n<p>在你想要展示访问量的地方添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if theme.busuanzi</span><br><span class=\"line\">  .busuanzi</span><br><span class=\"line\">    &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>即可。</p>\n<h2 id=\"Sitemap\"><a href=\"#Sitemap\" class=\"headerlink\" title=\"Sitemap\"></a>Sitemap</h2><blockquote>\n<p><a href=\"https://github.com/hexojs/hexo-generator-sitemap\" target=\"_blank\" rel=\"noopener\">hexo-generator-sitemap</a> 站点地图用于SEO，生成xml文件供搜索引擎爬取</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure>\n\n<p>在根目录下的<code>_config.yml</code>中添加配置项：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Sitemap</span></span><br><span class=\"line\"><span class=\"attr\">sitemap:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">sitemap.xml</span></span><br></pre></td></tr></table></figure>\n\n<p>其他配置可参见<a href=\"https://github.com/hexojs/hexo-generator-sitemap\" target=\"_blank\" rel=\"noopener\">hexo-generator-sitemap</a></p>\n<h2 id=\"修改模板\"><a href=\"#修改模板\" class=\"headerlink\" title=\"修改模板\"></a>修改模板</h2><h2 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h2><p>在<code>layout</code>中添加分类专用模板<code>categories.pug</code>（也可以是其他名称，但不能是“category”，因为这个已经被hexo默认占用了<a href=\"https://hexo.io/zh-cn/docs/templates\" target=\"_blank\" rel=\"noopener\">模板</a>），模板如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">extends partial&#x2F;layout</span><br><span class=\"line\"></span><br><span class=\"line\">block container</span><br><span class=\"line\">  h1.categories!&#x3D;  __(&#39;prev_post&#39;)</span><br><span class=\"line\">  .category-all!&#x3D; list_categories(site.categories, &#123; show_count: false &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">block copyright</span><br><span class=\"line\">  include partial&#x2F;copyright</span><br></pre></td></tr></table></figure>\n\n<p>其中继承的layout和下方的内容可以自定义，关键在<code>list_categories</code>方法，该方法由<a href=\"https://hexo.io/zh-cn/docs/helpers#list-categories\" target=\"_blank\" rel=\"noopener\">Hexo</a>提供，会渲染出分类列表，将其放在合适的位置。</p>\n<p>第一个参数需传递<code>site.categories</code>，将会渲染全站所有的分类数据（参考<a href=\"https://hexo.io/zh-cn/docs/variables\" target=\"_blank\" rel=\"noopener\">变量</a>）。</p>\n<p>第二个参数为一些个性化参数，可自由配置。</p>\n<p>添加完成分类专用模板之后，如果想要个性化定制，还需要添加<code>category.pug</code>（必须是这个名称），在模板中通过<code>page.posts</code>获取到分类列表数据进行渲染。由于hexo会依次查找category-archive-index，当有该模板时就会拿来渲染，因此也可以在后几个模板中做兼容处理，而无需单独创建<code>category.pug</code>，参见<a href=\"https://hexo.io/zh-cn/docs/templates\" target=\"_blank\" rel=\"noopener\">模板</a></p>\n<p>使用时新建page</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new page &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在新建的page中添加<code>layout</code>属性为自己建的专用模板的名称即可。</p>\n","tags":["Hexo"]},{"title":"切换常用软件源地址","url":"/2019/12/source-address-switch/","content":"<h2 id=\"设置git代理\"><a href=\"#设置git代理\" class=\"headerlink\" title=\"设置git代理\"></a>设置git代理</h2><blockquote>\n<p>需要拥有梯子，同时开启梯子的本地sock代理或http代理</p>\n</blockquote>\n<p><strong>设置git全局代理</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class=\"line\">$ git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>\n\n<p>如果只想代理特定网站，例如Github，则把<code>https.proxy</code>改为<code>https.https://github.com.proxy</code>(<code>http.proxy</code>同理)。</p>\n<p>如果想用梯子的http代理，则把<code>socks5://127.0.0.1:1080</code>改为<code>http://127.0.0.1:1080</code></p>\n<p><strong>取消代理</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br><span class=\"line\">$ git config --global --<span class=\"built_in\">unset</span> https.proxy</span><br></pre></td></tr></table></figure>\n\n<p>如果设置时是代理特定网站，则命令改成<code>https.https://github.com.proxy</code></p>\n<blockquote>\n<p>以上仅针对拉取仓库时是https协议的，ssh协议如下</p>\n</blockquote>\n<p><strong>SSH协议仓库</strong></p>\n<p>修改<code>~/.ssh/config</code>文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">  HostName github.com</span><br><span class=\"line\">  User git</span><br><span class=\"line\">  # sock代理</span><br><span class=\"line\">  ProxyCommand nc -v -x 127.0.0.1:1080 %h %p</span><br><span class=\"line\">  # http代理</span><br><span class=\"line\">  # ProxyCommand socat - PROXY:127.0.0.1:%h:%p,proxyport&#x3D;8080</span><br></pre></td></tr></table></figure>"},{"title":"快速搭建Hexo+Github博客","url":"/2019/12/start-blog-hexo/","content":"<h2 id=\"使用Hexo-Github搭建博客\"><a href=\"#使用Hexo-Github搭建博客\" class=\"headerlink\" title=\"使用Hexo+Github搭建博客\"></a>使用Hexo+Github搭建博客</h2><p>好久没有弄博客了，之前用WordPress在阿里云上搭了一个，但是自从阿里云到期后就一直懒得再弄了。平时写的记的都放在为知笔记里，现在终于打算再整理一下，思来想去还是弄个托管在Github上的静态博客吧，免得以后再要迁移服务器什么的那么麻烦。</p>\n<p>静态博客的框架有很多，Github Pages推的<a href=\"https://jekyllrb.com/\" target=\"_blank\" rel=\"noopener\">Jekyll</a>，使用Go编写的<a href=\"https://gohugo.io/\" target=\"_blank\" rel=\"noopener\">Hugo</a>，使用Python编写的<a href=\"https://getpelican.com/\" target=\"_blank\" rel=\"noopener\">Pelican</a>等等，作为一个前端er，肯定就要用基于Node开发的<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"noopener\">Hexo</a>啦</p>\n<h2 id=\"本地搭建\"><a href=\"#本地搭建\" class=\"headerlink\" title=\"本地搭建\"></a>本地搭建</h2><p>开始之前，需要安装一下<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">Node</a>环境。推荐使用<a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">Nvm</a>来管理node环境，当然如果你只是为了写个博客，那么去node官网下载安装即可。</p>\n<p>安装完成之后，推荐按照<a href=\"/2019/12/source-address-switch/\">切换常用软件源地址</a>中设置一下npm源和github代理，否过国内的网络环境，你懂的~</p>\n<p>做好了准备工作，就可以按照以下步骤开始了：</p>\n<ul>\n<li><p>安装hexo <code>npm i hexo-cli -g</code></p>\n</li>\n<li><p>初始化项目 <code>hexo init blog</code></p>\n</li>\n<li><p>进入项目并安装依赖 <code>cd blog &amp;&amp; npm i</code></p>\n</li>\n<li><p>启动本地服务 <code>hexo server</code></p>\n</li>\n</ul>\n<h2 id=\"个性化\"><a href=\"#个性化\" class=\"headerlink\" title=\"个性化\"></a>个性化</h2><p>Hexo支持设置主题，在官网上收录有部分<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">主题</a>，也可以去Github上自己找。</p>\n<blockquote>\n<p>建议不要直接clone源仓库，因为如果自己有对主题做修改，那么修改是无法提交的。建议先fork主题到自己的github下，然后在clone这个fork的仓库，这样就可以push提交了</p>\n</blockquote>\n<p>将主题clone到themes目录下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:XXX/XXX.git themes/XXX</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用git submodule</strong></p>\n<p>直接clone不方便在其他地方上拉取主题模块，因此建议使用<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\" target=\"_blank\" rel=\"noopener\">Git Submodule</a>来管理：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git submodule add git@github.com:XXX/XXX.git themes/XXX</span><br></pre></td></tr></table></figure>\n\n<p>在重新clone时加上<code>--recursive</code>，即可自动拉取子模块。亦或clone之后执行：</p>\n<ul>\n<li><p><code>git submodule init</code></p>\n</li>\n<li><p><code>git submodule update</code> </p>\n</li>\n</ul>\n<p>初始化和拉取更新。</p>\n<p>因为git submodule默认检出的是master上最新的提交，并未做分支跟踪，因此可以再执行：</p>\n<ul>\n<li><code>git submodule foreach &#39;git checkout master&#39;</code></li>\n</ul>\n<p>手动切到master分支。</p>\n<p>之后更新子模块则可使用：</p>\n<ul>\n<li><code>git submodule foreach &#39;git pull&#39;</code></li>\n</ul>\n<p>如需要开发子模块，则进入子模块中checkout到所需分支。</p>\n<p>最后按照主题里要求的安装依赖，再修改项目下<code>_config.yml</code>中的<code>theme</code>项为themes目录里的主题文件夹名即可</p>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><h2 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h2><p>使用<a href=\"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\" target=\"_blank\" rel=\"noopener\">GitHub Actions</a></p>\n<h2 id=\"备份源码\"><a href=\"#备份源码\" class=\"headerlink\" title=\"备份源码\"></a>备份源码</h2>","tags":["Hexo"]},{"title":"tags","url":"/tags/index.html","content":""}]